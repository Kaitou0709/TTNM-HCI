// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPIcheck.Data;

#nullable disable

namespace WebAPIcheck.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230814070350_Subjects")]
    partial class Subjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPIcheck.Data.Faculties", b =>
                {
                    b.Property<int>("IdFaculty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFaculty"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFaculty");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Grade", b =>
                {
                    b.Property<int>("IdGrade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGrade"));

                    b.Property<int>("IdTeacher")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGrade");

                    b.HasIndex("IdTeacher");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("WebAPIcheck.Data.LessonTime", b =>
                {
                    b.Property<int>("IdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTime"));

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTime");

                    b.ToTable("LessonTime");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Schedules", b =>
                {
                    b.Property<int>("IdSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSchedule"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTimeEnd")
                        .HasColumnType("int");

                    b.Property<int>("IdTimeStart")
                        .HasColumnType("int");

                    b.HasKey("IdSchedule");

                    b.HasIndex("IdTimeEnd");

                    b.HasIndex("IdTimeStart");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Semesters", b =>
                {
                    b.Property<int>("IdSemester")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSemester"));

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2");

                    b.HasKey("IdSemester");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("WebAPIcheck.Data.SemestersSubject", b =>
                {
                    b.Property<int>("IdSemesterSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSemesterSubject"));

                    b.Property<int>("IdSchedule")
                        .HasColumnType("int");

                    b.Property<int>("IdSubjectClass")
                        .HasColumnType("int");

                    b.HasKey("IdSemesterSubject");

                    b.HasIndex("IdSchedule");

                    b.HasIndex("IdSubjectClass");

                    b.ToTable("SemestersSubject");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Students", b =>
                {
                    b.Property<int>("IdStudent")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("IdGrade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdStudent");

                    b.HasIndex("IdGrade");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Subjects", b =>
                {
                    b.Property<int>("IdSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSubject"));

                    b.Property<int>("IdFaclty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSubject");

                    b.HasIndex("IdFaclty");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("WebAPIcheck.Data.SubjectsClass", b =>
                {
                    b.Property<int>("IdClass")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClass"));

                    b.Property<int>("IdSemester")
                        .HasColumnType("int");

                    b.Property<int>("IdSubject")
                        .HasColumnType("int");

                    b.Property<string>("NameClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberClass")
                        .HasColumnType("int");

                    b.Property<DateTime>("SemesterDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SemesterDateStart")
                        .HasColumnType("datetime2");

                    b.HasKey("IdClass");

                    b.HasIndex("IdSemester");

                    b.HasIndex("IdSubject");

                    b.ToTable("SubjectClasses");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Teachers", b =>
                {
                    b.Property<int>("IdTeacher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTeacher"));

                    b.Property<int?>("IdFaculty")
                        .HasColumnType("int");

                    b.Property<string>("NameTeacher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("IdTeacher");

                    b.HasIndex("IdFaculty");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Grade", b =>
                {
                    b.HasOne("WebAPIcheck.Data.Teachers", "Teacher")
                        .WithMany()
                        .HasForeignKey("IdTeacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Schedules", b =>
                {
                    b.HasOne("WebAPIcheck.Data.LessonTime", "LessonTimeEnd")
                        .WithMany()
                        .HasForeignKey("IdTimeEnd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPIcheck.Data.LessonTime", "LessonTimeStart")
                        .WithMany()
                        .HasForeignKey("IdTimeStart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonTimeEnd");

                    b.Navigation("LessonTimeStart");
                });

            modelBuilder.Entity("WebAPIcheck.Data.SemestersSubject", b =>
                {
                    b.HasOne("WebAPIcheck.Data.Schedules", "Schedules")
                        .WithMany()
                        .HasForeignKey("IdSchedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPIcheck.Data.SubjectsClass", "SubjectsClass")
                        .WithMany()
                        .HasForeignKey("IdSubjectClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedules");

                    b.Navigation("SubjectsClass");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Students", b =>
                {
                    b.HasOne("WebAPIcheck.Data.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("IdGrade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Subjects", b =>
                {
                    b.HasOne("WebAPIcheck.Data.Faculties", "Faculties")
                        .WithMany()
                        .HasForeignKey("IdFaclty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("WebAPIcheck.Data.SubjectsClass", b =>
                {
                    b.HasOne("WebAPIcheck.Data.Semesters", "Semesters")
                        .WithMany()
                        .HasForeignKey("IdSemester")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPIcheck.Data.Subjects", "Subjects")
                        .WithMany()
                        .HasForeignKey("IdSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semesters");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("WebAPIcheck.Data.Teachers", b =>
                {
                    b.HasOne("WebAPIcheck.Data.Faculties", "Faculties")
                        .WithMany()
                        .HasForeignKey("IdFaculty");

                    b.Navigation("Faculties");
                });
#pragma warning restore 612, 618
        }
    }
}
